# Testing fek pdf text extraction 

import pdfplumber
import logging
import re
from pathlib import Path
from datetime import datetime

logging.basicConfig(level=logging.INFO)

# Constants for page layout
PAGE_WIDTH = 595
PAGE_HEIGHT = 842
BBOX_CONFIG = {
    "one_column_first_page": (0, 400, PAGE_WIDTH, 799),
    "one_column_other_pages": (0, 64, PAGE_WIDTH, 799),
    "two_column_first_page_left": (0, 366, 0.5 * PAGE_WIDTH, 779),
    "two_column_first_page_right": (0.5 * PAGE_WIDTH, 366, PAGE_WIDTH, 779),
    # Add more bounding box configurations as needed
}

article_nums_digits_pattern = re.compile(r"\bΆρθρ\b")  # Sample regex pattern

def check_page_dimensions(page, pdf_name, idx):
    if abs(page.width - PAGE_WIDTH) > 1 or abs(page.height - PAGE_HEIGHT) > 1:
        logging.warning(f"Non-standard page dimensions in {pdf_name}, page {idx + 1}")
        return False
    return True

def process_page(page, idx):
    # Layout detection based on index
    one_column = page.crop(BBOX_CONFIG["one_column_first_page" if idx == 0 else "one_column_other_pages"]).extract_text()
    if not one_column:
        left_articles = page.crop(BBOX_CONFIG["two_column_first_page_left"]).extract_text()
        right_articles = page.crop(BBOX_CONFIG["two_column_first_page_right"]).extract_text()
        return f"{left_articles}\n{right_articles}"
    else:
        page_articles = page.crop(BBOX_CONFIG["one_column_first_page" if idx == 0 else "one_column_other_pages"]).extract_text()
        return page_articles

def write_output_files(pdf_name, txt_articles, txt_full):
    txt_files_dir = Path("pdf_files") / "text"
    txt_files_dir.mkdir(parents=True, exist_ok=True)

    txt_articles_file = txt_files_dir / f"{pdf_name}_articles.txt"
    txt_articles_file.write_text(txt_articles, encoding="utf-8")
    
    txt_full_file = txt_files_dir / f"{pdf_name}_full.txt"
    txt_full_file.write_text(txt_full, encoding="utf-8")

def process_pdf_file(pdf_path):
    pdf_name = pdf_path.stem
    logging.info(f"Processing {pdf_name}")

    txt_articles, txt_full = "", ""
    
    try:
        with pdfplumber.open(pdf_path) as f:
            for idx, page in enumerate(f.pages):
                if not check_page_dimensions(page, pdf_name, idx):
                    continue  # Skip non-standard dimension pages

                page_text = process_page(page, idx)
                txt_articles += f"\n{page_text}"
                txt_full += f"\n{page_text}"
                
    except Exception as e:
        logging.error(f"Error processing {pdf_name}: {e}")
        return

    # Append special character and write outputs
    txt_articles += "\nΆρθρ"
    write_output_files(pdf_name, txt_articles, txt_full)
    logging.info(f"Completed processing for {pdf_name}")

# Example Usage
pdf_files = Path("pdf_files").glob("*.pdf")
for pdf in pdf_files:
    process_pdf_file(pdf)
    
